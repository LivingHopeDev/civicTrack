generator client {
  provider = "prisma-client-js"
}
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole  {
  admin
citizen
polRep

}
model User {
    id          String    @id @unique @default(uuid())
    name        String
    email       String    @unique
    password    String?
    role        userRole  @default(citizen)
    is_verified Boolean   @default(false)
    google_id   String?
    image_url   String?
    state       String?
    local_gov   String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    otp         Otp[]    
    socialMedia SocialMedia[] // for citizens
    politicalProfile  PoliticalProfile[] // for pol rep
    contactInfo ContactInfo? // Optional for political representatives


    @@map("users")
}

model Otp {
    id       String   @id @unique @default(uuid())
    token    String
    expiry   DateTime
    userId   String
    user     User     @relation( fields: [userId], references: [id], onDelete: Cascade)

@@map("otps")
}

model PoliticalProfile {
id      String @id @unique @default(uuid())
userId  String  
user    User   @relation(fields: [userId],references: [id],onDelete: Cascade)
socialMedia SocialMedia[]
profession  Profession[]
education   Education[]
politicalParty PoliticalParty[]
previousRole  PreviousRole[]

@@map("politicalProfiles")
}


// For Political Representatives Only
model SocialMedia {
  id         String  @id @unique @default(uuid())
  userId     String? // Nullable, links to a citizen user
  user       User?   @relation(fields: [userId],references: [id],onDelete: Cascade)
  facebookUrl        String?          
  xUrl               String?           
  linkedinUrl        String?
  instagramUrl       String?     
  politicalProfileId String?
  politicalProfile PoliticalProfile? @relation(fields: [politicalProfileId],references: [id],onDelete: Cascade)
 
  @@map("socialMedias")

}

model ContactInfo{
  id                  String  @id @unique @default(uuid())
  userId              String  @unique
  email               String
  hotline             String

  user                User @relation(fields: [userId],references: [id])
  @@map("contactInfos")
}

model Profession {
  id            String @id @unique @default(uuid())
  politicalProfileId String  
  position      String
  term          String
  startDate     String
  endDate       String

  politicalProfile PoliticalProfile @relation(fields: [politicalProfileId], references: [id], onDelete: Cascade)


  @@map("professions")
}

model Education {
  id               String   @id @unique @default(uuid()) 
  politicalProfileId String  
  institution      String   
  city             String   
  startDate        DateTime
  endDate          DateTime 
  
  politicalProfile PoliticalProfile @relation(fields: [politicalProfileId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model PreviousRole {
  id               String   @id @unique @default(uuid())  
  politicalProfileId String  
  position         String   
  startDate        DateTime 
  endDate          DateTime 
  politicalProfile PoliticalProfile @relation(fields: [politicalProfileId], references: [id], onDelete: Cascade)

  @@map("previousRoles")
}

model PoliticalParty {
  id               String   @id @unique @default(uuid())  
  politicalProfileId String  
  partyName        String   
  yearJoined       Int        
  politicalProfile PoliticalProfile @relation(fields: [politicalProfileId], references: [id], onDelete: Cascade)

  @@map("politicalParties")
}